<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.0/jquery.min.js"></script>
    <!-- <script src="https://code.jquery.com/jqeury-3.7.0.min.js"></script> -->
    <title>Document</title>
</head>
<body>
    <form name="register">
        <label for="">이름</label>
        <input type="text" id="name">
        <br/>
        <input type="radio" name="gender" value="남자" id="male">
        <label id="male">남자</label>
        <input type="radio" name="gender" value="여자" id="female">
        <label id="female">여자</label>
        <br/>
        <button type="button" onclick="ajaxGet()">ajax get 제출</button>
        <button type="button" onclick="ajaxPost()">ajax post 제출</button>
        <button type="button" onclick="axiosGet()">axios get 제출</button>
        <button type="button" onclick="axiosPost()">axios post 제출</button>
        <button type="button" onclick="fetchGet()">fetch get 제출</button>
        <button type="button" onclick="fetchPost()">fetch Post 제출</button>
    </form>
    <div class="result"></div>
    <script>
        const resultBox = document.querySelector('.result');

        function ajaxGet(){

            console.log('ajax get')
            //폼선택
            const form = document.forms['register'];

            
            // document.forms로 접근했을 때만 input type = text를 id로만 불러올 수있다.
            // 물론 다른애들은 name으로 불러와야댐
                 console.log(form);
                // console.log(form.name.value);S
                // console.log(form.gender.value);
            const data = {
                name : form.name.value,
                gender : form.gender.value
            }
            $.ajax({
                type : 'GET', 
                url : '/ajax',  //받는 type만 다르다면 같은 url로 받아도 됨
                data : data,    //키랑 value값이랑 같을 때 data, < 이런식으로만 입력해줘도된다.
                success: (res) =>{
                    console.log('res', res);
                    resultBox.textContent = `GET /ajax 요청완료 ${res.name}님은 ${res.gender}입니다.`
                    resultBox.style.color = 'blue'
                },
            });
        }
        function ajaxPost(){
            console.log('ajax post')
            const form = document.forms['register']
            //예외처리
            if(form.name.value === ''){
                alert('이름을 입력하세요')
                return;
            }
            const data ={
                name: form.name.value,
                gender:form.gender.value
            }
            $.ajax({
                type: 'POST',
                url: '/ajax',
                data : data,
                success: (res) =>{
                    console.log('res', res);
                    resultBox.textContent = `POST /ajax 요청완료 ${res.name} 님은 ${res.gender}입니다.`
                    resultBox.style.color = 'red';
                },
            });
        }
        function axiosGet(){
            console.log('axios get')
            const form = document.forms['register'];
            const data ={
                name: form.name.value,
                gender : form.gender.value,
            };
            axios({
                method: 'GET',
                url: 'axios',
                params: data,
            }).then(res => {
                console.log('res', res)     //ajax는 success로 res 받았는데 axios는 then 뒤에 응답받는다.
                resultBox.textContent = `GET /axios 요청완료! ${res.data.name}님은 ${res.data.gender}입니다.`;
                resultBox.style.color = 'aqua';
                // res는 axios가 만들어준 객체임
            });
        }
        async function axiosPost(){
            console.log('axios Post');
            const form = document.forms['register'];
            const data ={
                name: form.name.value,
                gender : form.gender.value,
            };
            
            const res = await axios({
                method: 'POST',
                url: 'axios',
                data,       //post기 때문에 params를 적어주면 안된다.
            });

            const {name, gender} =res.data  //구조분해할당
            //그럼 밑에 res.data.name으로 안 적고 그냥 name만 적어도 된다.
            resultBox.textContent = `POST /axios 요청 완료! ${name}님은 ${gender}입니다.`
            resultBox.style.color = 'greenyellow'
        }
        function fetchGet(){
            console.log('fetch Get');
            // fetch는 객체를 만들 필요는 없음
            const form = document.forms['register']
            const url = `?name=${form.name.value}&gender=${form.gender.value}`
            fetch(`/fetch${url}`, {
                method : 'GET'
            }).then(res =>{
                //JSON응답을 네이티브 자바스크립트 객체로 파싱
                console.log('res', res);

                //return으로 밑에 json 객체를 밑에 then에 넘겨준다.
                return res.json()
            }).then(data =>{
                console.log('data',data);
                resultBox.textContent = `GEt /fetch 요청 완료! ${data.name}님은 ${data.gender}입니다.`
                resultBox.style.color = 'orange'
            });
        }
        function fetchPost(){
            console.log('fetch post')
            const form = document.forms['register']
            const data = {
                name : form.name.value,
                gender : form.gender.value,
            };
            fetch('/fetch', {
                method: 'POST',
                headers :{
                    'Content-Type' : 'application/json'
                },
                body:JSON.stringify(data)
                //JSON.stringify() : 자바스크립트 객체를 JSON 텍스트로 변환 -> key,value 가 스트링형태로 바뀜
                //JSON.parse(): JSON형식의 텍스트를 자바스크립트 객체로 변환
                /*
                const 
                */
            }).then(res =>{
                console.log('res', res);
                return res.json();
            }).then(data =>{
                console.log('data', data);
                resultBox.textContent = `post /fetch 요청 완료! ${data.name}님은 ${data.gender}입니다.`
                resultBox.style.color = 'hotpink'
            });
        }
    </script>
</body>
</html>